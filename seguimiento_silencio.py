
# seguimiento_silencio.py

import datetime

SEGUIMIENTOS = [
    {
        "espera": datetime.timedelta(minutes=30),
        "mensaje": "ğŸ‘‹ Solo querÃ­amos saber si tuvo oportunidad de leer nuestro Ãºltimo mensaje. Estamos listos para ayudarle ğŸ˜Š"
    },
    {
        "espera": datetime.timedelta(hours=1),
        "mensaje": "ğŸ“Œ Â¡Hola nuevamente! Quedamos atentos para coordinar una cita gratuita y personalizada. Â¿Le gustarÃ­a que le llamemos para conversar mejor?"
    },
    {
        "espera": datetime.timedelta(days=3),
        "mensaje": "ğŸ‘€ Seguimos disponibles para apoyarle con su consulta ambiental. Si desea retomar la conversaciÃ³n, serÃ¡ un gusto ayudarle ğŸŒ¿"
    },
    {
        "espera": datetime.timedelta(minutes=30),  # 30 min despuÃ©s del mensaje anterior
        "mensaje": None  # No insistir mÃ¡s. Reset automÃ¡tico si vuelve a escribir.
    }
]

def obtener_mensaje_seguimiento(minutos_desde_ultimo_mensaje):
    """
    Devuelve el mensaje de seguimiento correspondiente al tiempo transcurrido desde el Ãºltimo contacto.
    Si no se debe enviar mÃ¡s mensajes, devuelve None.
    """
    transcurrido = datetime.timedelta(minutes=minutos_desde_ultimo_mensaje)
    acumulado = datetime.timedelta(0)

    for paso in SEGUIMIENTOS:
        acumulado += paso["espera"]
        if transcurrido < acumulado:
            return paso["mensaje"]
    return None

def debe_reiniciar_conversacion(minutos_desde_ultimo_mensaje):
    """
    Devuelve True si el cliente respondiÃ³ despuÃ©s de haber agotado los seguimientos.
    Esto reinicia el flujo desde el mensaje inicial.
    """
    max_tiempo = sum((paso["espera"] for paso in SEGUIMIENTOS), datetime.timedelta())
    return datetime.timedelta(minutes=minutos_desde_ultimo_mensaje) > max_tiempo
